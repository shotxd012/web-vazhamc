<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('partials/head') %>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/@phosphor-icons/web"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: #111827;
        }
        
        .glass-card {
            background: #1f2937;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
        }

        /* Star decoration */
        .stars {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }
        
        .star {
            position: absolute;
            width: 2px;
            height: 2px;
            background: white;
            border-radius: 50%;
            opacity: 0.3;
        }

        @keyframes twinkle {
            0%, 100% { opacity: 0.1; }
            50% { opacity: 0.7; }
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.2);
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(76, 175, 80, 0.4);
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(76, 175, 80, 0.7);
        }
    </style>
</head>
<body class="text-white min-h-screen font-sans">
    <!-- Background stars -->
    <div class="stars" id="stars"></div>

    <%- include('partials/nav') %>

    <main class="container mx-auto px-4 py-16">
        <!-- Page Header -->
        <div class="container mx-auto px-4 py-10 flex flex-col items-center gap-8">
            <h1 class="text-5xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-red-400 via-red-500 to-red-600">
                System Status
            </h1>
            <p class="text-gray-400 text-center max-w-2xl">Real-time monitoring of all system components and services</p>
        </div>

        <!-- Status Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl mx-auto">
            <!-- Discord Server Status -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-xl bg-red-500/10 flex items-center justify-center">
                            <i class="ph ph-discord-logo text-xl text-red-400"></i>
                        </div>
                        <h2 class="text-xl font-semibold text-red-400">Discord Server</h2>
                    </div>
                    <div class="flex items-center space-x-2">
                        <span class="w-3 h-3 <%= discordStats ? 'bg-red-500 animate-pulse' : 'bg-red-500' %> rounded-full"></span>
                        <span class="text-sm text-gray-300"><%= discordStats ? 'Online' : 'Offline' %></span>
                    </div>
                </div>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Members</span>
                        <span class="text-white font-medium"><%= discordStats?.memberCount || 'N/A' %></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Channels</span>
                        <span class="text-white font-medium"><%= discordStats?.channelCount || 'N/A' %></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Roles</span>
                        <span class="text-white font-medium"><%= discordStats?.roleCount || 'N/A' %></span>
                    </div>
                </div>
            </div>

            <!-- Web Server Status -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-xl bg-red-500/10 flex items-center justify-center">
                            <i class="ph ph-globe text-xl text-red-400"></i>
                        </div>
                        <h2 class="text-xl font-semibold text-red-400">Web Server</h2>
                    </div>
                    <div class="flex items-center space-x-2">
                        <span class="w-3 h-3 bg-red-500 rounded-full animate-pulse"></span>
                        <span class="text-sm text-gray-300">Online</span>
                    </div>
                </div>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Uptime</span>
                        <span class="text-white font-medium"><%= webStats?.uptime || 'N/A' %></span>
                    </div>
                </div>
            </div>

            <!-- ShotDB Status -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-xl bg-red-500/10 flex items-center justify-center">
                            <i class="ph ph-database text-xl text-red-400"></i>
                        </div>
                        <h2 class="text-xl font-semibold text-red-400">ShotDB V6</h2>
                    </div>
                    <span class="px-3 py-1 rounded-full text-sm font-medium <%= mongoStats?.status === 'Connected' ? 'bg-red-500/20 text-red-400' : 'bg-red-500/20 text-red-400' %>">
                        <%= mongoStats?.status || 'Disconnected' %>
                    </span>
                </div>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Status</span>
                        <span class="text-white font-medium"><%= mongoStats?.status || 'N/A' %></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Collections</span>
                        <span class="text-white font-medium"><%= mongoStats?.collections || 'N/A' %></span>
                    </div>
                </div>
            </div>

            <!-- Discord Bot Status -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-xl bg-red-500/10 flex items-center justify-center">
                            <i class="ph ph-robot text-xl text-red-400"></i>
                        </div>
                        <h2 class="text-xl font-semibold text-red-400">Discord Bot</h2>
                    </div>
                    <span class="px-3 py-1 rounded-full text-sm font-medium <%= botStats?.status === 'Online' ? 'bg-red-500/20 text-red-400' : 'bg-red-500/20 text-red-400' %>">
                        <%= botStats?.status || 'Offline' %>
                    </span>
                </div>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Uptime</span>
                        <span class="text-white font-medium"><%= botStats?.uptime ? formatUptime(botStats.uptime / 1000) : 'N/A' %></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Ping</span>
                        <span class="text-white font-medium"><%= botStats?.ping || 'N/A' %>ms</span>
                    </div>
                </div>
            </div>

            <!-- Minecraft Server Status -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-xl bg-red-500/10 flex items-center justify-center">
                            <i class="ph ph-game-controller text-xl text-red-400"></i>
                        </div>
                        <h2 class="text-xl font-semibold text-red-400">Minecraft Server</h2>
                    </div>
                    <span class="px-3 py-1 rounded-full text-sm font-medium <%= mcStatus.status === 'online' ? 'bg-red-500/20 text-red-400' : 'bg-red-500/20 text-red-400' %>">
                        <%= mcStatus.status %>
                    </span>
                </div>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Players</span>
                        <span class="text-white font-medium"><%= mcStatus.players.online %>/<%= mcStatus.players.max %></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Version</span>
                        <span class="text-white font-medium">1.13 to 1.21</span>
                    </div>
                    <div>
                        <span class="text-gray-400 block mb-2">MOTD</span>
                        <p class="text-white text-sm whitespace-pre-line bg-gray-900/50 p-3 rounded-lg"><%= mcStatus.motd %></p>
                    </div>
                </div>
            </div>

            <!-- Media Service Status -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-xl bg-red-500/10 flex items-center justify-center">
                            <i class="ph ph-cloud-lightning text-xl text-red-400"></i>
                        </div>  
                        <h2 class="text-xl font-semibold text-red-400">Media Service</h2>
                    </div>
                    <span id="mediaStatus" class="px-3 py-1 rounded-full text-sm font-medium <%= mediaStatus === 'operational' ? 'bg-red-500/20 text-red-400' : 'bg-red-500/20 text-red-400' %>">
                        <%= mediaStatus === 'operational' ? 'Connected' : (mediaStatus === 'error' ? 'Disconnected' : 'Unknown') %>
                    </span>
                </div>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Status</span>
                        <span id="mediaStatusText" class="text-white font-medium"><%= mediaStatus === 'operational' ? 'Operational' : (mediaStatus === 'error' ? 'Failed to check status' : 'Unknown') %></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Last Check</span>
                        <span class="text-white font-medium" id="mediaLastCheck"><%= new Date().toLocaleString() %></span>
                    </div>
                </div>
            </div>      

            <!-- System Status -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-xl <%= (!discordStats || mongoStats?.status !== 'Connected' || botStats?.status !== 'Online' || mcStatus.status !== 'online' || mediaStatus !== 'operational') ? 'bg-red-500/10' : 'bg-red-500/10' %> flex items-center justify-center">
                            <i class="ph ph-gauge text-xl <%= (!discordStats || mongoStats?.status !== 'Connected' || botStats?.status !== 'Online' || mcStatus.status !== 'online' || mediaStatus !== 'operational') ? 'text-red-400' : 'text-red-400' %>"></i>
                        </div>
                        <h2 class="text-xl font-semibold <%= (!discordStats || mongoStats?.status !== 'Connected' || botStats?.status !== 'Online' || mcStatus.status !== 'online' || mediaStatus !== 'operational') ? 'text-red-400' : 'text-red-400' %>">System Status</h2>
                    </div>
                    <span class="px-3 py-1 rounded-full text-sm font-medium <%= (!discordStats || mongoStats?.status !== 'Connected' || botStats?.status !== 'Online' || mcStatus.status !== 'online' || mediaStatus !== 'operational') ? 'bg-red-500/20 text-red-400' : 'bg-red-500/20 text-red-400' %>">
                        <i class="ph <%= (!discordStats || mongoStats?.status !== 'Connected' || botStats?.status !== 'Online' || mcStatus.status !== 'online' || mediaStatus !== 'operational') ? 'ph-warning' : 'ph-check-circle' %> mr-1"></i>
                        <%= (!discordStats || mongoStats?.status !== 'Connected' || botStats?.status !== 'Online' || mcStatus.status !== 'online' || mediaStatus !== 'operational') ? 'Issues Detected' : 'Healthy' %>
                    </span>
                </div>
                <div class="space-y-4">
                    <% if (!discordStats || mongoStats?.status !== 'Connected' || botStats?.status !== 'Online' || mcStatus.status !== 'online' || mediaStatus !== 'operational') { %>
                    <div class="mt-4 p-3 bg-red-500/10 rounded-lg">
                        <p class="text-red-400 text-sm">
                            <% if (!discordStats) { %>• Discord Server is offline<br><% } %>
                            <% if (mongoStats?.status !== 'Connected') { %>• Database is disconnected<br><% } %>
                            <% if (botStats?.status !== 'Online') { %>• Discord Bot is offline<br><% } %>
                            <% if (mcStatus.status !== 'online') { %>• Minecraft Server is offline<br><% } %>
                            <% if (mediaStatus !== 'operational') { %>• Media Service is offline<% } %>
                        </p>
                    </div>
                    <% } %>
                </div>
            </div>

            <!-- API Response Time Chart -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5 col-span-1 md:col-span-2 lg:col-span-3">
                <h2 class="text-xl font-semibold text-red-400 mb-6">API Response Time (Last 24 Hours)</h2>
                <div style="height: 300px;">
                    <canvas id="responseTimeChart"></canvas>
                </div>
            </div>

            <!-- Combined Metrics Chart -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5 col-span-1 md:col-span-2 lg:col-span-3">
                <h2 class="text-xl font-semibold text-red-400 mb-6">System Metrics (Last 24 Hours)</h2>
                <div style="height: 400px;">
                    <canvas id="combinedMetricsChart"></canvas>
                </div>
            </div>

            <!-- Last Updated -->
            <div class="bg-gray-800/50 backdrop-blur-md rounded-[1.5rem] border border-gray-700 p-6 transition-all duration-300 hover:border-gray-600 hover:shadow-lg hover:shadow-red-500/5">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-xl bg-red-500/10 flex items-center justify-center">
                            <i class="ph ph-clock text-xl text-red-400"></i>
                        </div>
                        <h2 class="text-xl font-semibold text-red-400">Last Updated</h2>
                    </div>
                </div>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Timestamp</span>
                        <span class="text-white font-medium" id="lastUpdated"></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-400">Auto Refresh</span>
                        <span class="text-white font-medium">Every 30s</span>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <%- include('partials/footer') %>   

    <script>
        // Create stars
        function createStars() {
            const stars = document.getElementById('stars');
            const count = 100;
            
            for (let i = 0; i < count; i++) {
                const star = document.createElement('div');
                star.className = 'star';
                
                // Random position
                const x = Math.random() * 100;
                const y = Math.random() * 100;
                
                // Random size
                const size = Math.random() * 2 + 1;
                
                // Random opacity
                const opacity = Math.random() * 0.5 + 0.1;
                
                // Apply styles
                star.style.left = `${x}%`;
                star.style.top = `${y}%`;
                star.style.width = `${size}px`;
                star.style.height = `${size}px`;
                star.style.opacity = opacity;
                
                // Add subtle animation with random delay
                star.style.animation = `twinkle ${Math.random() * 5 + 3}s infinite ${Math.random() * 5}s`;
                
                stars.appendChild(star);
            }
        }

        // Initialize charts with real data
        function initializeCharts() {
            const historicalData = JSON.parse('<%- JSON.stringify(historicalData) %>');
            
            try {
                // API Response Time Chart
                const responseTimeCtx = document.getElementById('responseTimeChart');
                if (responseTimeCtx) {
                    const responseTimeChart = new Chart(responseTimeCtx, {
                        type: 'line',
                        data: {
                            labels: historicalData.map(data => new Date(data.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})),
                            datasets: [{
                                label: 'API Response Time (ms)',
                                data: historicalData.map(data => data.webResponseTime),
                                borderColor: '#10B981',
                                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                fill: true,
                                tension: 0.1,
                                pointBackgroundColor: '#10B981',
                                pointBorderColor: '#10B981',
                                pointRadius: 3
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            interaction: {
                                intersect: false,
                                mode: 'index'
                            },
                            scales: {
                                x: {
                                    type: 'category',
                                    ticks: {
                                        color: '#CBD5E0',
                                        maxTicksLimit: 8
                                    },
                                    grid: {
                                        color: 'rgba(255, 255, 255, 0.1)'
                                    }
                                },
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        color: '#CBD5E0',
                                        callback: function(value) {
                                            return value + 'ms';
                                        }
                                    },
                                    grid: {
                                        color: 'rgba(255, 255, 255, 0.1)'
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    labels: {
                                        color: '#CBD5E0'
                                    }
                                },
                                tooltip: {
                                    backgroundColor: 'rgba(17, 24, 39, 0.9)',
                                    titleColor: '#CBD5E0',
                                    bodyColor: '#CBD5E0',
                                    borderColor: '#10B981',
                                    borderWidth: 1
                                }
                            }
                        }
                    });
                }

                // Combined Metrics Chart
                const combinedMetricsCtx = document.getElementById('combinedMetricsChart');
                if (combinedMetricsCtx) {
                    const combinedMetricsChart = new Chart(combinedMetricsCtx, {
                        type: 'line',
                        data: {
                            labels: historicalData.map(data => new Date(data.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})),
                            datasets: [
                                {
                                    label: 'API Response Time (ms)',
                                    data: historicalData.map(data => data.webResponseTime),
                                    borderColor: '#10B981',
                                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                    fill: false,
                                    tension: 0.4,
                                    pointBackgroundColor: '#10B981',
                                    pointBorderColor: '#10B981',
                                    pointRadius: 2,
                                    yAxisID: 'y'
                                },
                                {
                                    label: 'CPU Usage (%)',
                                    data: historicalData.map(data => data.systemCpu),
                                    borderColor: '#3B82F6',
                                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                                    fill: false,
                                    tension: 0.4,
                                    pointBackgroundColor: '#3B82F6',
                                    pointBorderColor: '#3B82F6',
                                    pointRadius: 2,
                                    yAxisID: 'y1'
                                },
                                {
                                    label: 'Memory Usage (%)',
                                    data: historicalData.map(data => data.systemMemory),
                                    borderColor: '#EC4899',
                                    backgroundColor: 'rgba(236, 72, 153, 0.1)',
                                    fill: false,
                                    tension: 0.4,
                                    pointBackgroundColor: '#EC4899',
                                    pointBorderColor: '#EC4899',
                                    pointRadius: 2,
                                    yAxisID: 'y1'
                                },
                                {
                                    label: 'Bot Ping (ms)',
                                    data: historicalData.map(data => data.botPing),
                                    borderColor: '#F59E0B',
                                    backgroundColor: 'rgba(245, 158, 11, 0.1)',
                                    fill: false,
                                    tension: 0.4,
                                    pointBackgroundColor: '#F59E0B',
                                    pointBorderColor: '#F59E0B',
                                    pointRadius: 2,
                                    yAxisID: 'y'
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            interaction: {
                                intersect: false,
                                mode: 'index'
                            },
                            scales: {
                                x: {
                                    type: 'category',
                                    ticks: {
                                        color: '#CBD5E0',
                                        maxTicksLimit: 8
                                    },
                                    grid: {
                                        color: 'rgba(255, 255, 255, 0.1)'
                                    }
                                },
                                y: {
                                    type: 'linear',
                                    display: true,
                                    position: 'left',
                                    title: {
                                        display: true,
                                        text: 'Response Time / Ping (ms)',
                                        color: '#CBD5E0'
                                    },
                                    beginAtZero: true,
                                    ticks: {
                                        color: '#CBD5E0',
                                        callback: function(value) {
                                            return value + 'ms';
                                        }
                                    },
                                    grid: {
                                        color: 'rgba(255, 255, 255, 0.1)'
                                    }
                                },
                                y1: {
                                    type: 'linear',
                                    display: true,
                                    position: 'right',
                                    title: {
                                        display: true,
                                        text: 'Usage (%)',
                                        color: '#CBD5E0'
                                    },
                                    beginAtZero: true,
                                    max: 100,
                                    ticks: {
                                        color: '#CBD5E0',
                                        callback: function(value) {
                                            return value + '%';
                                        }
                                    },
                                    grid: {
                                        color: 'rgba(255, 255, 255, 0.1)'
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    labels: {
                                        color: '#CBD5E0',
                                        usePointStyle: true,
                                        pointStyle: 'circle'
                                    }
                                },
                                tooltip: {
                                    backgroundColor: 'rgba(17, 24, 39, 0.9)',
                                    titleColor: '#CBD5E0',
                                    bodyColor: '#CBD5E0',
                                    borderColor: '#10B981',
                                    borderWidth: 1,
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.dataset.label || '';
                                            if (label) {
                                                label += ': ';
                                            }
                                            if (context.dataset.yAxisID === 'y') {
                                                label += context.parsed.y + 'ms';
                                            } else {
                                                label += context.parsed.y + '%';
                                            }
                                            return label;
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            } catch (error) {
                console.error('Error initializing charts:', error);
                
                // Show error message in chart container
                const container = document.getElementById('combinedMetricsChart');
                if (container) {
                    container.style.display = 'flex';
                    container.style.alignItems = 'center';
                    container.style.justifyContent = 'center';
                    container.innerHTML = '<p class="text-red-400">Chart could not be loaded</p>';
                }
            }
        }

        // Update timestamps
        function updateTimestamps() {
            const now = new Date();
            const timeString = now.toLocaleString();
            
            const elements = ['lastUpdated', 'navLastUpdated', 'mediaLastCheck'];
            elements.forEach(elementId => {
                const element = document.getElementById(elementId);
                if (element) {
                    element.textContent = timeString;
                }
            });
        }

        // Fetch latest data from server
        async function fetchLatestData() {
            try {
                const response = await fetch('/status/data');
                const data = await response.json();
                
                // Update charts with new data
                if (data.historicalData) {
                    initializeCharts();
                }
                
                // Update other metrics
                updateSystemMetrics(data);
            } catch (error) {
                console.error('Error fetching latest data:', error);
            }
        }

        // Update system metrics with real data
        function updateSystemMetrics(data) {
            if (!data) return;
            
            const elements = {
                'webResponseTime': data.webStats?.responseTime?.toFixed(2) + 'ms',
                'botPing': data.botStats?.ping + 'ms',
                'discordMembers': data.discordStats?.memberCount?.toLocaleString(),
                'mcPlayers': `${data.mcStatus?.players?.online || 0}/${data.mcStatus?.players?.max || 0}`
            };

            Object.entries(elements).forEach(([id, value]) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                }
            });
        }

        // Initialize everything
        document.addEventListener('DOMContentLoaded', function() {
            // Create stars background
            createStars();
            
            updateTimestamps();
            initializeCharts();
            
            // Update timestamps every second
            setInterval(updateTimestamps, 1000);
            
            // Fetch latest data every 30 seconds
            setInterval(fetchLatestData, 30000);
        });

        // Handle chart responsiveness
        window.addEventListener('resize', function() {
            Chart.helpers.each(Chart.instances, function(instance) {
                if (instance.chart) {
                    instance.chart.resize();
                }
            });
        });
    </script>

</body>
</html>

<!-- Floating Chat Button -->
<button id="message-toggle" class="fixed bottom-5 right-5 bg-red-600 text-white p-3 rounded-full shadow-lg hover:bg-red-700 transition-all duration-300 z-50">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
    </svg>
</button>

<!-- Chat Box -->
<div id="message-box" class="fixed bottom-16 right-5 bg-gray-800 text-white p-3 rounded-lg shadow-xl w-72 transform transition-all duration-300 ease-in-out opacity-0 translate-y-4 pointer-events-none z-40">
    <div class="flex items-center justify-between mb-2">
        <h2 class="text-base font-semibold text-red-400">Chat</h2>
        <button id="close-message" class="text-gray-400 hover:text-white transition-colors duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
    </div>

    <!-- Chat Display -->
    <div id="chat-messages" class="h-60 overflow-y-auto bg-gray-900 p-2 rounded-lg border border-gray-700 mb-2"></div>

    <% if (user) { %>
        <!-- Message Input -->
        <div class="mt-2">
            <textarea id="message-input" class="w-full p-2 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200 text-sm" 
                placeholder="Type your message..." rows="1"></textarea>
            <button id="send-message" class="bg-red-600 w-full py-1.5 mt-1.5 rounded-lg hover:bg-red-700 transition-colors duration-200 flex items-center justify-center space-x-1 text-sm">
                <span>Send</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
            </button>
        </div>
    <% } else { %>
        <div class="text-center py-2">
            <p class="text-gray-400 text-sm">Please login to send messages</p>
            <a href="/login" class="text-red-400 hover:text-red-300 transition-colors duration-200 text-sm">Login here</a>
        </div>
    <% } %>
</div>

<!-- Custom Scrollbar Style -->
<style>
/* Custom Scrollbar */
#chat-messages {
    scrollbar-width: thin;
    scrollbar-color: #ef4444 #1f2937;
}

#chat-messages::-webkit-scrollbar {
    width: 4px;
}

#chat-messages::-webkit-scrollbar-track {
    background: #1f2937;
    border-radius: 10px;
}

#chat-messages::-webkit-scrollbar-thumb {
    background: #ef4444;
    border-radius: 10px;
}

#chat-messages::-webkit-scrollbar-thumb:hover {
    background: #dc2626;
}

/* Message Box Animation */
#message-box.active {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
}

/* Message Animation */
@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.message-item {
    animation: slideIn 0.3s ease-out;
}
</style>

<script>
    document.getElementById("message-toggle").addEventListener("click", () => {
        const messageBox = document.getElementById("message-box");
        messageBox.classList.toggle("active");
        if (messageBox.classList.contains("active")) {
            loadMessages();
        }
    });

    document.getElementById("close-message").addEventListener("click", () => {
        document.getElementById("message-box").classList.remove("active");
    });

    async function loadMessages() {
        try {
            const response = await fetch("/messages");
            let messages = await response.json();
            messages = messages.slice(-4);

            const chatBox = document.getElementById("chat-messages");
            chatBox.innerHTML = ""; 

            messages.forEach(msg => {
                const messageDiv = document.createElement("div");
                messageDiv.classList.add("message-item", "p-2", "border-b", "border-gray-700", "flex", "items-start", "space-x-2", "mb-1");

                messageDiv.innerHTML = `
                    <img src="https://cdn.discordapp.com/avatars/${msg.userId}/${msg.avatar}.png" 
                         class="w-8 h-8 rounded-full border border-red-500">
                    <div class="flex-1">
                        <div class="flex items-center space-x-1">
                            <span class="text-xs font-medium text-red-400">${msg.username}</span>
                            <span class="text-xs text-gray-400">[${msg.role || 'Member'}]</span>
                        </div>
                        <p class="text-gray-300 text-xs mt-0.5">${msg.message}</p>
                    </div>
                `;
                chatBox.appendChild(messageDiv);
            });

            chatBox.scrollTop = chatBox.scrollHeight;
        } catch (error) {
            console.error("Error loading messages:", error);
        }
    }

    <% if (user) { %>
    document.getElementById("send-message").addEventListener("click", async () => {
        const messageInput = document.getElementById("message-input");
        const message = messageInput.value.trim();
        
        if (!message) {
            messageInput.classList.add("border-red-500");
            setTimeout(() => messageInput.classList.remove("border-red-500"), 1000);
            return;
        }

        try {
            const response = await fetch("/send-message", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ message })
            });

            const result = await response.json();
            if (result.success) {
                messageInput.value = "";
                loadMessages();
            } else {
                alert("Error sending message.");
            }
        } catch (error) {
            console.error("Error sending message:", error);
        }
    });

    // Allow sending message with Enter key
    document.getElementById("message-input").addEventListener("keypress", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            document.getElementById("send-message").click();
        }
    });
    <% } %>

    setInterval(() => {
        if (document.getElementById("message-box").classList.contains("active")) {
            loadMessages();
        }
    }, 5000);
</script>
